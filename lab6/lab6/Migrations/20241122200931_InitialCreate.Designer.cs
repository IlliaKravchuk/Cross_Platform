// <auto-generated />
using System;
using Lab6.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace lab6.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241122200931_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lab6.Models.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                    b.Property<string>("AchievementDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AchievementTypeCode")
                        .HasColumnType("int");

                    b.Property<int>("RefAchievementTypeAchievementTypeCode")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("AchievementId");

                    b.HasIndex("RefAchievementTypeAchievementTypeCode");

                    b.HasIndex("StudentId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("Lab6.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Lab6.Models.BehaviourMonitoring", b =>
                {
                    b.Property<int>("BehaviourMonitoringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BehaviourMonitoringId"));

                    b.Property<string>("MonitoringDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("BehaviourMonitoringId");

                    b.HasIndex("StudentId");

                    b.ToTable("BehaviourMonitorings");
                });

            modelBuilder.Entity("Lab6.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Lab6.Models.Detention", b =>
                {
                    b.Property<int>("DetentionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetentionId"));

                    b.Property<DateTime>("DateTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetentionDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DetentionTypeCode")
                        .HasColumnType("int");

                    b.Property<int>("RefDetentionTypeDetentionTypeCode")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("DetentionId");

                    b.HasIndex("RefDetentionTypeDetentionTypeCode");

                    b.HasIndex("StudentId");

                    b.ToTable("Detentions");
                });

            modelBuilder.Entity("Lab6.Models.RefAchievementType", b =>
                {
                    b.Property<int>("AchievementTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementTypeCode"));

                    b.Property<string>("AchievementTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AchievementTypeCode");

                    b.ToTable("RefAchievementTypes");
                });

            modelBuilder.Entity("Lab6.Models.RefAddressType", b =>
                {
                    b.Property<int>("AddressTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressTypeId"));

                    b.Property<string>("AddressTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressTypeId");

                    b.ToTable("RefAddressTypes");
                });

            modelBuilder.Entity("Lab6.Models.RefDetentionType", b =>
                {
                    b.Property<int>("DetentionTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetentionTypeCode"));

                    b.Property<string>("DetentionTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DetentionTypeCode");

                    b.ToTable("RefDetentionTypes");
                });

            modelBuilder.Entity("Lab6.Models.RefEventType", b =>
                {
                    b.Property<int>("EventTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeCode"));

                    b.Property<string>("EventTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventTypeCode");

                    b.ToTable("RefEventTypes");
                });

            modelBuilder.Entity("Lab6.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("BioData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Lab6.Models.StudentAddress", b =>
                {
                    b.Property<int>("StudentAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentAddressId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("RefAddressTypeAddressTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentAddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("RefAddressTypeAddressTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAddresses");
                });

            modelBuilder.Entity("Lab6.Models.StudentEvent", b =>
                {
                    b.Property<int>("StudentEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentEventId"));

                    b.Property<string>("EventDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventTypeCode")
                        .HasColumnType("int");

                    b.Property<int>("RefEventTypeEventTypeCode")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentEventId");

                    b.HasIndex("RefEventTypeEventTypeCode");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentEvents");
                });

            modelBuilder.Entity("Lab6.Models.StudentLoan", b =>
                {
                    b.Property<int>("StudentLoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentLoanId"));

                    b.Property<decimal>("AmountOfLoan")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateOfLoan")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoanDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentLoanId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLoans");
                });

            modelBuilder.Entity("Lab6.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<string>("TeacherDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Lab6.Models.Transcript", b =>
                {
                    b.Property<int>("TranscriptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TranscriptId"));

                    b.Property<DateTime>("DateOfTranscript")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("TranscriptDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TranscriptId");

                    b.HasIndex("StudentId");

                    b.ToTable("Transcripts");
                });

            modelBuilder.Entity("Lab6.Models.Achievement", b =>
                {
                    b.HasOne("Lab6.Models.RefAchievementType", "RefAchievementType")
                        .WithMany("Achievements")
                        .HasForeignKey("RefAchievementTypeAchievementTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefAchievementType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Lab6.Models.BehaviourMonitoring", b =>
                {
                    b.HasOne("Lab6.Models.Student", "Student")
                        .WithMany("BehaviourMonitorings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Lab6.Models.Class", b =>
                {
                    b.HasOne("Lab6.Models.Teacher", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Lab6.Models.Detention", b =>
                {
                    b.HasOne("Lab6.Models.RefDetentionType", "RefDetentionType")
                        .WithMany("Detentions")
                        .HasForeignKey("RefDetentionTypeDetentionTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Student", "Student")
                        .WithMany("Detentions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefDetentionType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Lab6.Models.StudentAddress", b =>
                {
                    b.HasOne("Lab6.Models.Address", "Address")
                        .WithMany("StudentAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.RefAddressType", "RefAddressType")
                        .WithMany("StudentAddresses")
                        .HasForeignKey("RefAddressTypeAddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Student", "Student")
                        .WithMany("StudentAddresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("RefAddressType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Lab6.Models.StudentEvent", b =>
                {
                    b.HasOne("Lab6.Models.RefEventType", "RefEventType")
                        .WithMany("StudentEvents")
                        .HasForeignKey("RefEventTypeEventTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Student", "Student")
                        .WithMany("StudentEvents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefEventType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Lab6.Models.StudentLoan", b =>
                {
                    b.HasOne("Lab6.Models.Student", "Student")
                        .WithMany("StudentLoans")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Lab6.Models.Transcript", b =>
                {
                    b.HasOne("Lab6.Models.Student", "Student")
                        .WithMany("Transcripts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Lab6.Models.Address", b =>
                {
                    b.Navigation("StudentAddresses");
                });

            modelBuilder.Entity("Lab6.Models.RefAchievementType", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("Lab6.Models.RefAddressType", b =>
                {
                    b.Navigation("StudentAddresses");
                });

            modelBuilder.Entity("Lab6.Models.RefDetentionType", b =>
                {
                    b.Navigation("Detentions");
                });

            modelBuilder.Entity("Lab6.Models.RefEventType", b =>
                {
                    b.Navigation("StudentEvents");
                });

            modelBuilder.Entity("Lab6.Models.Student", b =>
                {
                    b.Navigation("BehaviourMonitorings");

                    b.Navigation("Detentions");

                    b.Navigation("StudentAddresses");

                    b.Navigation("StudentEvents");

                    b.Navigation("StudentLoans");

                    b.Navigation("Transcripts");
                });

            modelBuilder.Entity("Lab6.Models.Teacher", b =>
                {
                    b.Navigation("Classes");
                });
#pragma warning restore 612, 618
        }
    }
}
